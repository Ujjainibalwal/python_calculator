# -*- coding: utf-8 -*-
"""gui_calculator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rE7RkcYDX-oKL3-vZ5mMsU0W2jrs_GHU
"""

import tkinter as tk

class Calculator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Calculator")
        self.geometry("300x390")
        self.resizable(False, False)

        self.expression = ""
        self.input_text = tk.StringVar()

        self._build_ui()

    def _build_ui(self):
        # Entry display
        input_frame = tk.Frame(self)
        input_frame.pack(expand=True, fill="both")

        input_field = tk.Entry(
            input_frame, textvariable=self.input_text,
            font=("Arial", 20), justify="right", bd=5
        )
        input_field.pack(expand=True, fill="both", ipady=10)

        # Buttons
        btns_frame = tk.Frame(self)
        btns_frame.pack(expand=True, fill="both")

        buttons = [
            ("C",1,0), ("⌫",1,1), ("/",1,2), ("*",1,3),
            ("7",2,0), ("8",2,1), ("9",2,2), ("-",1,3),
            ("4",3,0), ("5",3,1), ("6",3,2), ("+",3,3),
            ("1",4,0), ("2",4,1), ("3",4,2), ("=",4,3),
            ("0",5,0), (".",5,1)
        ]

        for (text,r,c) in buttons:
            self._create_btn(btns_frame,text,r,c)

        # Fix operator duplicates (replace earlier - in row 1 col3)
        # Correcting layout:
        btns_frame.grid_slaves(row=1, column=3)[0].destroy()
        self._create_btn(btns_frame, "-", 2, 3)

    def _create_btn(self, container, text, row, col):
        btn = tk.Button(
            container, text=text, font=("Arial", 16),
            command=lambda t=text: self._on_click(t)
        )
        btn.grid(row=row, column=col, sticky="nsew", padx=2, pady=2)
        container.grid_rowconfigure(row, weight=1)
        container.grid_columnconfigure(col, weight=1)

    def _on_click(self, char):
        if char == "C":
            self.expression = ""
        elif char == "⌫":
            self.expression = self.expression[:-1]
        elif char == "=":
            try:
                self.expression = str(eval(self.expression))
            except Exception:
                self.expression = "Error"
        else:
            self.expression += str(char)

        self.input_text.set(self.expression)

if __name__ == "__main__":
    app = Calculator()
    app.mainloop()
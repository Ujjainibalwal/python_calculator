# -*- coding: utf-8 -*-
"""calculator.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rE7RkcYDX-oKL3-vZ5mMsU0W2jrs_GHU
"""

#!/usr/bin/env python3
import math

# ----------- CONFIG -----------
ANGLE_MODE = "DEG"   # "DEG" or "RAD"
# ------------------------------

def to_angle(x):
    return math.radians(x) if ANGLE_MODE == "DEG" else x

def safe_eval(expr):
    """
    Safely evaluate a math expression using limited namespace
    """
    # allowed math symbols
    allowed = {
        "sin":  lambda x: math.sin(to_angle(x)),
        "cos":  lambda x: math.cos(to_angle(x)),
        "tan":  lambda x: math.tan(to_angle(x)),
        "log":  math.log10,
        "ln":   math.log,
        "sqrt": math.sqrt,
        "pi":   math.pi,
        "e":    math.e,
    }

    # replace ^ with ** for power
    expr = expr.replace("^", "**")

    return eval(expr, {"__builtins__": {}}, allowed)

def main():
    global ANGLE_MODE
    print("=== CLI Calculator ===")
    print("Type expressions like:  2+3, sin(30), log(100), sqrt(9)")
    print("Type  :mode rad   or   :mode deg   to switch angle mode")
    print("Type  exit  to quit")
    print("------------------------\n")

    while True:
        expr = input(f"[{ANGLE_MODE}] > ").strip()

        if expr.lower() in ("exit", "quit"):
            break

        # switch mode command
        if expr.lower().startswith(":mode"):
            parts = expr.split()
            if len(parts) == 2 and parts[1].upper() in ("DEG","RAD"):
                ANGLE_MODE = parts[1].upper()
                print(f"Angle mode set to {ANGLE_MODE}")
            else:
                print("Usage: :mode deg   or   :mode rad")
            continue

        if not expr:
            continue

        try:
            ans = safe_eval(expr)
            print(ans)
        except Exception as e:
            print("Error:", e)

    print("Goodbye!")

if __name__ == "__main__":
    main()